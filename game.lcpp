pong = {window}>(
	{random} = window.Math,
	screenSize={x<=400,y<=600},
	center = [screenSize.x/2,screenSize.y/2],
	paddlePos = 0.9 * center.0,
	ballSize = 5,
	paddleSize = 5,
	state = newState 0,
	newState = gameNumber>(
		playerPos<=[
			[paddlePos center.1]
			[-paddlePos center.1]
		],
		num <= gameNumber,
		score<=[0 0],
		ball <= [center [1 1]],
	),
	update_ball = {playerPos ball score}>(
		p = playerPos,
		b = ball,
		s = score,
		ball.1 = bounceOffpaddles=>(
			x = b.0.0,
			p.reduce [[velocity p i]>(p.0 - x).abs.< paddleSize velocity [[1,-1].[i],velocity.y] , ball.1]
		),
		checkScore=>(
			x = b.0.0,
			{score scoredPoint} = (
				x.<ballSize, 
					({score scoredPoint<=\\$1},score.0=++score.0), 
					x.>(screenSize.x - ballSize)
						({score scoredPoint<=\\$1},score.1=++score.1)
						{score scoredPoint<= 0}
			),
			state = newState (++state.num),
			state = (state,state.score = score),
			(scoredPoint \state<$2,a>a)a>a,
		),
		bounceOffWalls=>(
			x = b.0.0,
			{score scoredPoint} = (
				x.<0, 
					({score scoredPoint<=\\$1},score.0=++score.0), 
					x.>screenSize.x 
						({score scoredPoint<=\\$1},score.1=++score.1)
						{score scoredPoint<= 0}
			),
			state = newState,
			state = (state,state.score = score),
			(scoredPoint \state<$2,a>a)a>a,
		),
	),
),
Z = f>(a>a a)(x>f(λ a x)),
Monad = monadFoo>Z (//Monad:<value>λZ()
	//monadFoo:λλvalue
	self>//:Monad
	x>//:value
	foo>(//:λvalue
		self λ$0,monadFoo foo x
	)
)λ$0,
maybe = Monad f>x>x == () () (f x),